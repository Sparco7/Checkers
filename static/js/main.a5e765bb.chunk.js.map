{"version":3,"sources":["components/Square.js","setPose.js","components/Board.js","components/App.js","index.js"],"names":["Square","state","tried_color","selected","console","log","props","setPose","rows","i","square","redPiece","bluePiece","color","this","board","className","onClick","React","Component","index","setState","turn","squareSelected","clicked","opTurn","condition","deepCopy","newBoard","pos","Math","abs","player2","player1","arr","row","push","JSON","parse","stringify","memoryBoard","movesCounter","Board","pose","value","initBoard","j","k","l","m","n","undoLastMove","length","reduLastMove","testPose","bind","type","map","key","Row","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.a5e765bb.chunk.js","sourcesContent":["import React from 'react';\nimport './checkers.css';\n\nclass Square extends React.Component {\n\n\t\t\tstate = {\n\t\t\t\ttried_color: ''\n\t\t\t}\n\t\t\t\n\t\t\tselected = () => {\n\t\t\t\tconsole.log(this.props.setPose)\n\t\t\t\tthis.props.setPose([this.props.rows,this.props.i], this.props.square);\t\n\t\t\t\t// console.log('this.props.square: ', this.props.square)\n\t\t\t}\n\n\n\t\t\n\t\t\trender() {\n\n\t\t\t\tlet redPiece = null;\n\t\t\t\tlet bluePiece = null;\n\t\t\t\tlet color = 'cell';\n\t\t\t\t\n\t\t\t\t// Creating 2Colored Board\n\t\t\t\tif ((!(this.props.rows % 2) && !(this.props.i % 2 )) || ((this.props.rows % 2) && (this.props.i % 2 ))) {\n\t\t\t\t\tcolor += ' green-square';\n\t\t\t\t} else {\n\t\t\t\t\tcolor += ' white-square';\n\t\t\t\t}\n\t\t\t\tswitch (this.props.board[this.props.rows][this.props.i]) {\n\t\t\t\t\tcase 'BL': \n\t\t\t\t\t\tbluePiece = true\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'RD':\n\t\t\t\t\t\tredPiece = true\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase null:\n\t\t\t\t\t\tbreak;\t\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn;\t\t\t \n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\treturn (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{  !(this.props.rows) &&\n\t\t\t\t\t\t\t<div className=\"col-numbers\">{this.props.rows + this.props.i}</div>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className={color}  onClick={() => {this.selected()}}>\n\t\t\t\t\t\t\t<div className={this.state.tried_color}>\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\tredPiece ? <div className=\"red-piece\">\n\t\t\t\t\t\t\t\t\t<div className=\"red-circle\"></div>\n\t\t\t\t\t\t\t\t</div> : \"\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbluePiece ? <div className=\"blue-piece\">\n\t\t\t\t\t\t\t\t\t<div className=\"blue-circle\"></div>\n\t\t\t\t\t\t\t\t</div> : \"\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\t\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t\n}\n\nexport default Square;","// const isValidMove = (fromIndex, toIndex, board) => {\r\n  // Returns true if move is valid, false otherwise\r\n// }\r\nconst setPose = (index, color, setState, state) => {\r\n\r\n    console.log('stats', setState, state)\r\n  if (color === state.turn || state.squareSelected.clicked) {\r\n    if (!state.squareSelected.clicked) {\r\n      setState(\r\n        {\r\n          squareSelected: {\r\n            pos: index,\r\n            clicked: true,\r\n          },\r\n          color: color,\r\n        },\r\n        function () {}\r\n      );\r\n    } else {\r\n      let newBoard = state.board;\r\n      let turn = state.turn;\r\n      let opTurn;\r\n      let condition;\r\n      let deepCopy;\r\n      turn === \"BL\"\r\n        ? (condition = index[0] < state.squareSelected.pos[0])\r\n        : (condition = index[0] > state.squareSelected.pos[0]);\r\n      turn === \"BL\" ? (opTurn = \"RD\") : (opTurn = \"BL\");\r\n\r\n      ////////////////////////////////////////////////////\r\n      // conditions to prevent changing of existing square.\r\n      ////////////////////////////////////////////////////\r\n\r\n      // checks that the chosen squar is empty\r\n      if (\r\n        newBoard[index[0]][index[1]] === null &&\r\n        // checks to see the user chose a different square\r\n        newBoard[index[0]][index[1]] !==\r\n          newBoard[state.squareSelected.pos[0]][\r\n            state.squareSelected.pos[1]\r\n          ] &&\r\n        // incase of a regular move\r\n        ((condition &&\r\n          Math.abs(index[1] - state.squareSelected.pos[1]) === 1) ||\r\n          // incase of a eating move\r\n          (condition &&\r\n            Math.abs(index[1] - state.squareSelected.pos[1]) === 2 &&\r\n            newBoard[(state.squareSelected.pos[0] + index[0]) / 2][\r\n              (state.squareSelected.pos[1] + index[1]) / 2\r\n            ] === opTurn)) &&\r\n        ((Math.abs(index[0] - state.squareSelected.pos[0]) === 1 &&\r\n          Math.abs(index[1] - state.squareSelected.pos[1]) === 1) ||\r\n          (Math.abs(index[0] - state.squareSelected.pos[0]) === 2 &&\r\n            Math.abs(index[1] - state.squareSelected.pos[1]) === 2))\r\n      ) {\r\n        if (turn === \"BL\" && state.player2) {\r\n          // actions for regular move\r\n          newBoard[state.squareSelected.pos[0]][\r\n            state.squareSelected.pos[1]\r\n          ] = null;\r\n          newBoard[index[0]][index[1]] = state.color;\r\n          // eating another player\r\n          if (Math.abs(index[1] - state.squareSelected.pos[1]) === 2) {\r\n            // action for eating move\r\n            newBoard[index[0] + 1][\r\n              Math.abs(index[1] + state.squareSelected.pos[1]) / 2\r\n            ] = null;\r\n          }\r\n          // changing player's turn\r\n          setState({ turn: state.player1 });\r\n          // // remembering the move\r\n          const arr = [];\r\n\r\n          for (let row of newBoard) {\r\n            arr.push([...row]);\r\n          }\r\n          // console.log(\"initial state: \", state.memoryBoard);\r\n          // console.log(\"read this:\", arr);\r\n          deepCopy = JSON.parse(JSON.stringify(newBoard));\r\n          setState({\r\n            memoryBoard: [...state.memoryBoard, deepCopy],\r\n            movesCounter: state.movesCounter + 1\r\n          });\r\n          console.log(\"memory board is: \", state.memoryBoard);\r\n        } else {\r\n          // actions for regular move\r\n          newBoard[state.squareSelected.pos[0]][\r\n            state.squareSelected.pos[1]\r\n          ] = null;\r\n          newBoard[index[0]][index[1]] = state.color;\r\n          // eating another player\r\n          if (Math.abs(index[1] - state.squareSelected.pos[1]) === 2) {\r\n            // action for eating move\r\n            newBoard[index[0] - 1][\r\n              Math.abs(index[1] + state.squareSelected.pos[1]) / 2\r\n            ] = null;\r\n          }\r\n          const arr = [];\r\n\r\n          for (let row of newBoard) {\r\n            arr.push([...row]);\r\n          }\r\n\r\n          setState({ turn: state.player2 });\r\n          // // remembering the move\r\n          deepCopy = JSON.parse(JSON.stringify(newBoard));\r\n          setState({\r\n            memoryBoard: [...state.memoryBoard, arr],\r\n            movesCounter: state.movesCounter + 1\r\n          });\r\n          console.log(\"memory board is: \", state.memoryBoard);\r\n        }\r\n      }\r\n\r\n      setState(\r\n        {\r\n          board: newBoard,\r\n          squareSelected: {\r\n            pos: \"\",\r\n            clicked: false,\r\n          },\r\n        },\r\n        function () {\r\n          // console.log(state.board);\r\n        }\r\n      );\r\n    }\r\n  } else {\r\n    console.log(\"No Color Choice!\");\r\n  }\r\n};\r\n\r\nexport default setPose;\r\n","import React from \"react\";\nimport Square from \"./Square\";\nimport testPose from \"../setPose\";\nimport \"./checkers.css\";\n\nclass Board extends React.Component {\n  state = {\n    board: [],\n    memoryBoard: [],\n    player1: \"RD\",\n    player2: \"BL\",\n    squareSelected: {\n      pose: \"\",\n      value: false,\n    },\n    color: \"\",\n    turn: \"\",\n    movesCounter: 0,\n  };\n\n  componentDidMount() {\n\n    this.initBoard();\n\n\n  }\n\n  // initializing board\n  initBoard = () => {\n    // this.setState({ board: [] });\n    let board = [];\n    // creating 8 rows\n    for (let j = 0; j < 8; j++) {\n      let row = [];\n      for (let i = 0; i < 8; i++) {\n        row.push(null);\n      }\n      board.push(row);\n    }\n\n    // placing RED pieces\n    for (let k = 0; k < 3; k++) {\n      for (let l = 0; l < 8; l++) {\n        if ((k === 0 && l % 2) || (k === 1 && !(l % 2)) || (k === 2 && l % 2)) {\n          board[k][l] = this.state.player1;\n        }\n      }\n    }\n\n    // placing BLUE pieces\n    for (let m = 5; m < 8; m++) {\n      for (let n = 0; n < 8; n++) {\n        if (\n          (m === 5 && !(n % 2)) ||\n          (m === 6 && n % 2) ||\n          (m === 7 && !(n % 2))\n        ) {\n          board[m][n] = this.state.player2;\n        }\n      }\n    }\n\n    // this.setState({ turn: this.state.player2 });\n\n       this.setState({\n      board: JSON.parse(JSON.stringify(board)),\n      player1: \"RD\",\n      player2: \"BL\",\n      turn: this.state.player2,\n      memoryBoard: [board],\n      movesCounter: 0\n    });\n\n    // return board;\n  };\n\n  undoLastMove = () => {\n    console.log(\"undo last move\");\n\n    this.setState({\n      board: this.state.memoryBoard[this.state.movesCounter - 1],\n    });\n\n    this.setState({\n      movesCounter: this.state.movesCounter - 1,\n    });\n    console.log(\"memory board is: \", this.state.memoryBoard);\n\n    //changing player's turn\n    if (this.state.memoryBoard.length % 2) {\n      this.setState({ turn: this.state.player2 }); // BLUE\n    } else {\n      this.setState({ turn: this.state.player1 }); // RED\n    }\n  };\n\n  reduLastMove = () => {\n    console.log(\"redu last move\");\n    this.setState({\n      board: this.state.memoryBoard[this.state.movesCounter + 1],\n    });\n\n    this.setState({\n      movesCounter: this.state.movesCounter + 1,\n    });\n  };\n\n  setPose = (index, color) => {\n    testPose(index, color, this.setState.bind(this), this.state);\n  };\n\n  render() {\n    console.log(\"moves counter\", this.state.movesCounter);\n\n    console.log(\"memory board length is: \", this.state.memoryBoard.length);\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col-lg-12 col-md-12 col-xs-12 new-game\">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              onClick={() => this.initBoard()}\n            >\n              New Game\n            </button>\n            <div className=\"row\">\n              {!(this.state.memoryBoard.length === 1) &&\n                !(this.state.movesCounter === 0) && (\n                  <div className=\"undo-redo\">\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-secondary\"\n                      onClick={() => this.undoLastMove()}\n                    >\n                      Undo\n                    </button>\n                  </div>\n                )}\n              {this.state.memoryBoard.length > this.state.movesCounter + 1 && (\n                <div className=\"undo-redo\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-secondary\"\n                    onClick={() => this.reduLastMove()}\n                  >\n                    Redo\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-lg-12 col-md-12 col-xs-12\">\n            <div className={this.state.turn}>\n              {this.state.turn === \"RD\" ? \"RED\" : \"BLUE\"} TURN\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-lg-12 col-md-12 col-xs-12\">\n            <div className=\"board\">\n              {this.state.board.map((row, i) => (\n                <Row\n                  key={i}\n                  row={row}\n                  index={i}\n                  board={this.state.board}\n                  setPose={this.setPose}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Row = ({ row, index, board, setPose }) => {\n  return (\n    <div>\n      <div></div>\n      <div className=\"row\">\n        {!index && <div className=\"row-numbers first-row-dig\">{index}</div>}\n        {index !== 0 && <div className=\"row-numbers\">{index}</div>}\n\n        {row.map((square, i) => (\n          <Square\n            key={i}\n            square={square}\n            i={i}\n            rows={index}\n            board={board}\n            setPose={setPose}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\nimport './checkers.css';\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container col-sm-12  col-md-12\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1>Checkers</h1>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Board />\n\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\nReactDOM.render(\n\t<App />,\n\tdocument.querySelector('#root')\n);"],"sourceRoot":""}